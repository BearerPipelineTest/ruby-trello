var search_data = {"index":{"searchIndex":["array","fakeboard","hash","helpers","integrationhelpers","integrationtest","container","object","string","trello","action","association","associationbuilder","hasmany","hasone","associationfetcher","hasmany","fetch","params","hasone","fetch","params","associationinfertool","associationproxy","attachment","authorization","basicauthpolicy","clock","nonce","oauthpolicy","basicdata","board","card","checkitemstate","checklist","client","comment","configuration","coverimage","customfield","customfielditem","customfieldoption","error","fakeboard","fakecard","fakeorganization","hasactions","item","jsonutils","classmethods","instancemethods","label","labelname","list","member","multiassociation","notification","organization","plugindatum","schema","attribute","base","boardpref","customattribute","customfielddisplay","default","attributebuilder","attributeregistration","serializer","customserializer","default","labels","time","webhooks","tinternet","token","webhook","<<()","==()","===()","actions()","actions_details()","actions_payload()","activated?()","add_attachment()","add_checklist()","add_comment()","add_item()","add_label()","add_member()","add_member()","all()","archive_all_cards()","association_class()","association_class()","association_restful_id()","association_restful_name()","attachments()","attachments_details()","attachments_payload()","attribute()","attributes()","attributes=()","auth_policy()","auth_policy()","authorize()","authorize()","authorize()","authorize()","authorize_url()","avatar_url()","basic?()","board()","board()","board()","boards()","boards_details()","boards_payload()","build()","build()","build()","build()","build_attributes()","build_attributes()","build_attributes()","build_attributes()","build_payload_for_create()","build_payload_for_create()","build_payload_for_create()","build_payload_for_create()","build_payload_for_update()","build_payload_for_update()","build_payload_for_update()","build_payload_for_update()","build_pending_update_attributes()","card()","card()","card()","card_payload()","cards_details()","cards_payload()","check_item_states()","checklists_details()","checklists_payload()","client()","client()","client()","close()","close()","close!()","close!()","closed?()","closed?()","closed?()","collection_name()","collection_name()","collection_path()","collection_path()","collection_path()","complete?()","configurable_attributes()","configuration()","configuration()","configure()","configure()","consumer_key()","consumer_secret()","copied_checklists_details()","copied_checklists_payload()","copy()","cover_image()","create()","create()","create_new_checklist()","create_new_option()","create_only?()","credentials()","custom_field_item_details()","custom_field_items_payload()","custom_field_option_details()","custom_fields_details()","custom_fields_payload()","default()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete_checklist_item()","delete_option()","deserialize()","deserialize()","deserialize()","deserialize()","element_name()","element_path()","element_path()","element_path()","eql?()","example_class()","example_class()","execute()","execute()","execute()","execute()","execute()","fetch()","fetch()","fetch_path()","filter_params()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find_card()","find_many()","for_action?()","from_json()","from_response()","from_response()","get()","get()","has_lists?()","hash()","included()","included()","infer_class_on_name()","infer_restful_resource_on_class()","item()","items()","json_into()","jsoned_into()","jsoned_into()","label_details()","label_name_details()","label_name_payload()","label_names()","label_options()","label_payload()","labels()","list()","list()","list()","lists_details()","lists_payload()","logger()","logger=()","many()","member()","member_creator()","members()","members()","method_missing()","mock_client_and_association()","mock_client_and_association()","move_all_cards()","move_to_board()","move_to_list()","move_to_list_on_any_board()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","notification_details()","notification_payload()","oauth?()","oauth_token()","oauth_token_secret()","one()","open_authorization_url()","open_public_key_url()","open_url()","option_value()","organization()","organization_details()","organization_payload()","orgs_details()","orgs_payload()","parse()","parse_json()","parse_json()","parse_many()","path_name()","plugin_data_details()","plugin_data_payload()","post()","primary_key?()","proxy_assocation()","public_key_url()","put()","readonly?()","refresh!()","register()","register()","register()","register_attrs()","remote_key()","remove()","remove_attachment()","remove_label()","remove_member()","remove_member()","remove_upvote()","reset!()","save()","save()","save()","schema()","schema()","search()","serialize()","serialize()","serialize()","serialize()","set()","setup_trello()","starred?()","timestamp()","to_a()","to_ary()","token_details()","token_payload()","type()","update!()","update_fields()","update_fields()","update_item_state()","update_only?()","upvote()","user_details()","user_payload()","valid?()","voters()","webhook_payload()","webhooks_details()","webhooks_payload()","changelog","contributing","gemfile","gemfile.lock","gemfile.lock.jruby","gemfile.lock.ruby_2_5","gemfile.lock.ruby_2_6","gemfile.lock.ruby_2_7","license","makefile","readme","rakefile","application.css","application.js","application.css","application.js","index.html","ruby-trello.gemspec"],"longSearchIndex":["array","fakeboard","hash","helpers","integrationhelpers","integrationtest","integrationtest::container","object","string","trello","trello::action","trello::association","trello::associationbuilder","trello::associationbuilder::hasmany","trello::associationbuilder::hasone","trello::associationfetcher","trello::associationfetcher::hasmany","trello::associationfetcher::hasmany::fetch","trello::associationfetcher::hasmany::params","trello::associationfetcher::hasone","trello::associationfetcher::hasone::fetch","trello::associationfetcher::hasone::params","trello::associationinfertool","trello::associationproxy","trello::attachment","trello::authorization","trello::authorization::basicauthpolicy","trello::authorization::clock","trello::authorization::nonce","trello::authorization::oauthpolicy","trello::basicdata","trello::board","trello::card","trello::checkitemstate","trello::checklist","trello::client","trello::comment","trello::configuration","trello::coverimage","trello::customfield","trello::customfielditem","trello::customfieldoption","trello::error","trello::fakeboard","trello::fakecard","trello::fakeorganization","trello::hasactions","trello::item","trello::jsonutils","trello::jsonutils::classmethods","trello::jsonutils::instancemethods","trello::label","trello::labelname","trello::list","trello::member","trello::multiassociation","trello::notification","trello::organization","trello::plugindatum","trello::schema","trello::schema::attribute","trello::schema::attribute::base","trello::schema::attribute::boardpref","trello::schema::attribute::customattribute","trello::schema::attribute::customfielddisplay","trello::schema::attribute::default","trello::schema::attributebuilder","trello::schema::attributeregistration","trello::schema::serializer","trello::schema::serializer::customserializer","trello::schema::serializer::default","trello::schema::serializer::labels","trello::schema::serializer::time","trello::schema::serializer::webhooks","trello::tinternet","trello::token","trello::webhook","trello::associationproxy#<<()","trello::basicdata#==()","trello::associationproxy#===()","trello::hasactions#actions()","helpers#actions_details()","helpers#actions_payload()","trello::webhook#activated?()","trello::card#add_attachment()","trello::card#add_checklist()","trello::card#add_comment()","trello::checklist#add_item()","trello::card#add_label()","trello::board#add_member()","trello::card#add_member()","trello::board::all()","trello::list#archive_all_cards()","trello::associationfetcher::hasmany::params#association_class()","trello::associationfetcher::hasone::params#association_class()","trello::associationfetcher::hasone::params#association_restful_id()","trello::associationfetcher::hasone::params#association_restful_name()","trello::card#attachments()","helpers#attachments_details()","helpers#attachments_payload()","trello::schema#attribute()","trello::basicdata#attributes()","trello::configuration#attributes=()","trello::auth_policy()","trello::client#auth_policy()","trello::authorization::basicauthpolicy::authorize()","trello::authorization::basicauthpolicy#authorize()","trello::authorization::oauthpolicy::authorize()","trello::authorization::oauthpolicy#authorize()","trello::authorize_url()","trello::member#avatar_url()","trello::configuration#basic?()","trello::action#board()","trello::comment#board()","trello::notification#board()","trello::organization#boards()","helpers#boards_details()","helpers#boards_payload()","trello::associationbuilder::hasmany::build()","trello::associationbuilder::hasone::build()","trello::schema::attributebuilder::build()","trello::schema::attributebuilder#build()","trello::schema::attribute::base#build_attributes()","trello::schema::attribute::boardpref#build_attributes()","trello::schema::attribute::customfielddisplay#build_attributes()","trello::schema::attribute::default#build_attributes()","trello::schema::attribute::base#build_payload_for_create()","trello::schema::attribute::boardpref#build_payload_for_create()","trello::schema::attribute::customfielddisplay#build_payload_for_create()","trello::schema::attribute::default#build_payload_for_create()","trello::schema::attribute::base#build_payload_for_update()","trello::schema::attribute::boardpref#build_payload_for_update()","trello::schema::attribute::customfielddisplay#build_payload_for_update()","trello::schema::attribute::default#build_payload_for_update()","trello::schema::attribute::base#build_pending_update_attributes()","trello::action#card()","trello::comment#card()","trello::notification#card()","helpers#card_payload()","helpers#cards_details()","helpers#cards_payload()","trello::card#check_item_states()","helpers#checklists_details()","helpers#checklists_payload()","trello::client()","trello::basicdata::client()","trello::basicdata#client()","trello::card#close()","trello::list#close()","trello::card#close!()","trello::list#close!()","trello::board#closed?()","trello::card#closed?()","trello::list#closed?()","trello::basicdata#collection_name()","trello::customfield#collection_name()","trello::basicdata#collection_path()","trello::customfielditem#collection_path()","trello::customfieldoption#collection_path()","trello::item#complete?()","trello::configuration::configurable_attributes()","trello::configuration()","trello::client#configuration()","trello::configure()","trello::client#configure()","trello::authorization::oauthpolicy#consumer_key()","trello::authorization::oauthpolicy#consumer_secret()","helpers#copied_checklists_details()","helpers#copied_checklists_payload()","trello::checklist#copy()","trello::card#cover_image()","trello::basicdata::create()","trello::client#create()","trello::card#create_new_checklist()","trello::customfield#create_new_option()","trello::schema::attribute::base#create_only?()","trello::configuration#credentials()","helpers#custom_field_item_details()","helpers#custom_field_items_payload()","helpers#custom_field_option_details()","helpers#custom_fields_details()","helpers#custom_fields_payload()","trello::schema::attribute::base#default()","trello::card#delete()","trello::checklist#delete()","trello::client#delete()","trello::comment#delete()","trello::customfield#delete()","trello::customfieldoption#delete()","trello::label#delete()","trello::webhook#delete()","trello::checklist#delete_checklist_item()","trello::customfield#delete_option()","trello::schema::serializer::default::deserialize()","trello::schema::serializer::labels::deserialize()","trello::schema::serializer::time::deserialize()","trello::schema::serializer::webhooks::deserialize()","trello::basicdata#element_name()","trello::basicdata#element_path()","trello::customfielditem#element_path()","trello::customfieldoption#element_path()","trello::basicdata#eql?()","object#example_class()","trello#example_class()","trello::associationfetcher::hasmany::fetch::execute()","trello::associationfetcher::hasmany::fetch#execute()","trello::associationfetcher::hasone::fetch::execute()","trello::associationfetcher::hasone::fetch#execute()","trello::tinternet::execute()","trello::associationfetcher::hasmany#fetch()","trello::associationfetcher::hasone#fetch()","trello::associationfetcher::hasmany::params#fetch_path()","trello::associationfetcher::hasmany::params#filter_params()","trello::action::find()","trello::basicdata::find()","trello::client#find()","trello::comment::find()","trello::customfield::find()","trello::customfieldoption::find()","trello::list::find()","trello::member::find()","trello::organization::find()","trello::token::find()","trello::board#find_card()","trello::client#find_many()","trello::schema::attribute::base#for_action?()","trello::jsonutils::classmethods#from_json()","trello::jsonutils::classmethods#from_response()","trello::jsonutils::instancemethods#from_response()","integrationtest#get()","trello::client#get()","trello::board#has_lists?()","trello::basicdata#hash()","integrationtest::included()","trello::jsonutils::included()","trello::associationinfertool::infer_class_on_name()","trello::associationinfertool::infer_restful_resource_on_class()","trello::checkitemstate#item()","trello::checklist#items()","string#json_into()","array#jsoned_into()","hash#jsoned_into()","helpers#label_details()","helpers#label_name_details()","helpers#label_name_payload()","trello::board#label_names()","helpers#label_options()","helpers#label_payload()","trello::board#labels()","trello::action#list()","trello::comment#list()","trello::notification#list()","helpers#lists_details()","helpers#lists_payload()","trello::logger()","trello::logger=()","trello::basicdata::many()","trello::notification#member()","trello::action#member_creator()","trello::card#members()","trello::organization#members()","trello::associationproxy#method_missing()","object#mock_client_and_association()","trello#mock_client_and_association()","trello::list#move_all_cards()","trello::card#move_to_board()","trello::card#move_to_list()","trello::card#move_to_list_on_any_board()","object::new()","trello::new()","trello::association::new()","trello::associationfetcher::hasmany::new()","trello::associationfetcher::hasmany::fetch::new()","trello::associationfetcher::hasmany::params::new()","trello::associationfetcher::hasone::new()","trello::associationfetcher::hasone::fetch::new()","trello::associationfetcher::hasone::params::new()","trello::associationproxy::new()","trello::authorization::basicauthpolicy::new()","trello::authorization::oauthpolicy::new()","trello::basicdata::new()","trello::client::new()","trello::configuration::new()","trello::error::new()","trello::fakeboard::new()","trello::multiassociation::new()","trello::schema::new()","trello::schema::attribute::base::new()","trello::schema::attributebuilder::new()","trello::schema::attributeregistration::new()","trello::authorization::nonce::next()","helpers#notification_details()","helpers#notification_payload()","trello::configuration#oauth?()","trello::authorization::oauthpolicy#oauth_token()","trello::authorization::oauthpolicy#oauth_token_secret()","trello::basicdata::one()","trello::open_authorization_url()","trello::open_public_key_url()","trello::open_url()","trello::customfielditem#option_value()","trello::notification#organization()","helpers#organization_details()","helpers#organization_payload()","helpers#orgs_details()","helpers#orgs_payload()","trello::basicdata::parse()","trello::jsonutils::classmethods#parse_json()","trello::jsonutils::instancemethods#parse_json()","trello::basicdata::parse_many()","trello::basicdata::path_name()","helpers#plugin_data_details()","helpers#plugin_data_payload()","trello::client#post()","trello::schema::attribute::base#primary_key?()","trello::associationproxy#proxy_assocation()","trello::public_key_url()","trello::client#put()","trello::schema::attribute::base#readonly?()","trello::basicdata#refresh!()","trello::schema::attribute::base#register()","trello::schema::attributeregistration::register()","trello::schema::attributeregistration#register()","trello::basicdata::register_attrs()","trello::schema::attribute::base#remote_key()","trello::customfielditem#remove()","trello::card#remove_attachment()","trello::card#remove_label()","trello::board#remove_member()","trello::card#remove_member()","trello::card#remove_upvote()","trello::reset!()","trello::basicdata::save()","trello::basicdata#save()","trello::customfielditem#save()","trello::basicdata::schema()","trello::basicdata#schema()","trello::action::search()","trello::schema::serializer::default::serialize()","trello::schema::serializer::labels::serialize()","trello::schema::serializer::time::serialize()","trello::schema::serializer::webhooks::serialize()","integrationtest::container::set()","integrationhelpers#setup_trello()","trello::board#starred?()","trello::authorization::clock::timestamp()","trello::associationproxy#to_a()","trello::associationproxy#to_ary()","helpers#token_details()","helpers#token_payload()","trello::customfielditem#type()","trello::basicdata#update!()","trello::basicdata#update_fields()","trello::fakeboard#update_fields()","trello::checklist#update_item_state()","trello::schema::attribute::base#update_only?()","trello::card#upvote()","helpers#user_details()","helpers#user_payload()","trello::card#valid?()","trello::card#voters()","helpers#webhook_payload()","helpers#webhooks_details()","helpers#webhooks_payload()","","","","","","","","","","","","","","","","","",""],"info":[["Array","","Array.html","",""],["FakeBoard","","FakeBoard.html","",""],["Hash","","Hash.html","",""],["Helpers","","Helpers.html","",""],["IntegrationHelpers","","IntegrationHelpers.html","",""],["IntegrationTest","","IntegrationTest.html","",""],["IntegrationTest::Container","","IntegrationTest/Container.html","",""],["Object","","Object.html","",""],["String","","String.html","",""],["Trello","","Trello.html","","<p>Ruby wrapper around the Trello API\n<p>First, set up your key information. You can get this information by …\n"],["Trello::Action","","Trello/Action.html","","<p>Action represents some event that occurred. For instance, when a card is created.\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Trello::Association","","Trello/Association.html","",""],["Trello::AssociationBuilder","","Trello/AssociationBuilder.html","",""],["Trello::AssociationBuilder::HasMany","","Trello/AssociationBuilder/HasMany.html","",""],["Trello::AssociationBuilder::HasOne","","Trello/AssociationBuilder/HasOne.html","",""],["Trello::AssociationFetcher","","Trello/AssociationFetcher.html","",""],["Trello::AssociationFetcher::HasMany","","Trello/AssociationFetcher/HasMany.html","",""],["Trello::AssociationFetcher::HasMany::Fetch","","Trello/AssociationFetcher/HasMany/Fetch.html","",""],["Trello::AssociationFetcher::HasMany::Params","","Trello/AssociationFetcher/HasMany/Params.html","",""],["Trello::AssociationFetcher::HasOne","","Trello/AssociationFetcher/HasOne.html","",""],["Trello::AssociationFetcher::HasOne::Fetch","","Trello/AssociationFetcher/HasOne/Fetch.html","",""],["Trello::AssociationFetcher::HasOne::Params","","Trello/AssociationFetcher/HasOne/Params.html","",""],["Trello::AssociationInferTool","","Trello/AssociationInferTool.html","",""],["Trello::AssociationProxy","","Trello/AssociationProxy.html","",""],["Trello::Attachment","","Trello/Attachment.html","","<p>A file or url that is linked to a Trello card\n<p>@!attribute id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::Authorization","","Trello/Authorization.html","",""],["Trello::Authorization::BasicAuthPolicy","","Trello/Authorization/BasicAuthPolicy.html","",""],["Trello::Authorization::Clock","","Trello/Authorization/Clock.html","",""],["Trello::Authorization::Nonce","","Trello/Authorization/Nonce.html","",""],["Trello::Authorization::OAuthPolicy","","Trello/Authorization/OAuthPolicy.html","","<p>Handles the OAuth connectivity to Trello.\n<p>For 2-legged OAuth, do the following:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">OAuthPolicy</span>.<span class=\"ruby-identifier\">consumer_credential</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Trello::BasicData","","Trello/BasicData.html","",""],["Trello::Board","","Trello/Board.html","","<p>A board on Trello\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::Card","","Trello/Card.html","","<p>A Card is a container that can house checklists and comments; it resides inside a List.\n<p>@!attribute [r] …\n"],["Trello::CheckItemState","","Trello/CheckItemState.html","","<p>Represents the state of an item.\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::Checklist","","Trello/Checklist.html","","<p>A Checklist holds items which are like a “task” list. Checklists are linked to a card.\n<p>@!attribute …\n"],["Trello::Client","","Trello/Client.html","",""],["Trello::Comment","","Trello/Comment.html","","<p>A Comment is a string with a creation date; it resides inside a Card and belongs to a User.\n<p>@!attribute …\n"],["Trello::Configuration","","Trello/Configuration.html","",""],["Trello::CoverImage","","Trello/CoverImage.html","","<p>The trello cover image\n<p>This is normally an attachment that the user (or trello) has set as the cover image …\n"],["Trello::CustomField","","Trello/CustomField.html","","<p>A Custom Field can be activated on a board. Values are stored at the card level.\n<p>@!attribute id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Trello::CustomFieldItem","","Trello/CustomFieldItem.html","","<p>A custom field item contains the value for a custom field on a particular card.\n"],["Trello::CustomFieldOption","","Trello/CustomFieldOption.html","","<p>A custom field option contains the individual items in a custom field dropdown menu.\n"],["Trello::Error","","Trello/Error.html","",""],["Trello::FakeBoard","","Trello/FakeBoard.html","",""],["Trello::FakeCard","","Trello/FakeCard.html","",""],["Trello::FakeOrganization","","Trello/FakeOrganization.html","",""],["Trello::HasActions","","Trello/HasActions.html","",""],["Trello::Item","","Trello/Item.html","","<p>An Item is a basic task that can be checked off and marked as completed.\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::JsonUtils","","Trello/JsonUtils.html","",""],["Trello::JsonUtils::ClassMethods","","Trello/JsonUtils/ClassMethods.html","",""],["Trello::JsonUtils::InstanceMethods","","Trello/JsonUtils/InstanceMethods.html","",""],["Trello::Label","","Trello/Label.html","","<p>A colored Label attached to a card\n<p>@!attribute [rw] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::LabelName","","Trello/LabelName.html","","<p>A colored Label attached to a card\n"],["Trello::List","","Trello/List.html","","<p>A List is a container which holds cards. Lists are items on a board.\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::Member","","Trello/Member.html","","<p>A Member is a user of the Trello service.\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::MultiAssociation","","Trello/MultiAssociation.html","",""],["Trello::Notification","","Trello/Notification.html","","<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n<p>@!attribute [rw] unread\n"],["Trello::Organization","","Trello/Organization.html","","<p>Organizations are useful for linking members together.\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::PluginDatum","","Trello/PluginDatum.html","","<p>A file or url that is linked to a Trello card\n<p>@!attribute id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["Trello::Schema","","Trello/Schema.html","",""],["Trello::Schema::Attribute","","Trello/Schema/Attribute.html","",""],["Trello::Schema::Attribute::Base","","Trello/Schema/Attribute/Base.html","",""],["Trello::Schema::Attribute::BoardPref","","Trello/Schema/Attribute/BoardPref.html","",""],["Trello::Schema::Attribute::CustomAttribute","","Trello/Schema/Attribute/CustomAttribute.html","",""],["Trello::Schema::Attribute::CustomFieldDisplay","","Trello/Schema/Attribute/CustomFieldDisplay.html","",""],["Trello::Schema::Attribute::Default","","Trello/Schema/Attribute/Default.html","",""],["Trello::Schema::AttributeBuilder","","Trello/Schema/AttributeBuilder.html","",""],["Trello::Schema::AttributeRegistration","","Trello/Schema/AttributeRegistration.html","",""],["Trello::Schema::Serializer","","Trello/Schema/Serializer.html","",""],["Trello::Schema::Serializer::CustomSerializer","","Trello/Schema/Serializer/CustomSerializer.html","",""],["Trello::Schema::Serializer::Default","","Trello/Schema/Serializer/Default.html","",""],["Trello::Schema::Serializer::Labels","","Trello/Schema/Serializer/Labels.html","",""],["Trello::Schema::Serializer::Time","","Trello/Schema/Serializer/Time.html","",""],["Trello::Schema::Serializer::Webhooks","","Trello/Schema/Serializer/Webhooks.html","",""],["Trello::TInternet","","Trello/TInternet.html","",""],["Trello::Token","","Trello/Token.html","","<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n<p>@!attribute [r] member_id\n"],["Trello::Webhook","","Trello/Webhook.html","","<p>A webhook is a URL called each time a specified model is updated\n<p>@!attribute [r] id\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@return</span> [<span class=\"ruby-constant\">String</span>]\n</pre>\n"],["<<","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-3C-3C","(*records)",""],["==","Trello::BasicData","Trello/BasicData.html#method-i-3D-3D","(other)","<p>Two objects are equal if their <em>id</em> methods are equal.\n"],["===","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-3D-3D-3D","(other)",""],["actions","Trello::HasActions","Trello/HasActions.html#method-i-actions","(options = {})","<p>Returns a list of the actions associated with this object.\n"],["actions_details","Helpers","Helpers.html#method-i-actions_details","()",""],["actions_payload","Helpers","Helpers.html#method-i-actions_payload","()",""],["activated?","Trello::Webhook","Trello/Webhook.html#method-i-activated-3F","()","<p>Check if the webhook is activated\n<p>@return [Boolean]\n"],["add_attachment","Trello::Card","Trello/Card.html#method-i-add_attachment","(attachment, name = '')","<p>Add an attachment to this card\n"],["add_checklist","Trello::Card","Trello/Card.html#method-i-add_checklist","(checklist, name: nil, position: nil)","<p>Add a checklist to this card\n"],["add_comment","Trello::Card","Trello/Card.html#method-i-add_comment","(text)","<p>Add a comment with the supplied text.\n"],["add_item","Trello::Checklist","Trello/Checklist.html#method-i-add_item","(name, checked = false, position = 'bottom')","<p>Add an item to the checklist\n"],["add_label","Trello::Card","Trello/Card.html#method-i-add_label","(label)","<p>Add a label\n"],["add_member","Trello::Board","Trello/Board.html#method-i-add_member","(member, type = :normal)","<p>Add a member to this Board.\n\n<pre>type =&gt; [ :admin, :normal, :observer ]</pre>\n"],["add_member","Trello::Card","Trello/Card.html#method-i-add_member","(member)","<p>Add a member to this card\n"],["all","Trello::Board","Trello/Board.html#method-c-all","()","<p>@return [Array&lt;Trello::Board&gt;] all boards for the current user\n"],["archive_all_cards","Trello::List","Trello/List.html#method-i-archive_all_cards","()","<p>Archives all the cards of the list\n"],["association_class","Trello::AssociationFetcher::HasMany::Params","Trello/AssociationFetcher/HasMany/Params.html#method-i-association_class","()",""],["association_class","Trello::AssociationFetcher::HasOne::Params","Trello/AssociationFetcher/HasOne/Params.html#method-i-association_class","()",""],["association_restful_id","Trello::AssociationFetcher::HasOne::Params","Trello/AssociationFetcher/HasOne/Params.html#method-i-association_restful_id","()",""],["association_restful_name","Trello::AssociationFetcher::HasOne::Params","Trello/AssociationFetcher/HasOne/Params.html#method-i-association_restful_name","()",""],["attachments","Trello::Card","Trello/Card.html#method-i-attachments","()","<p>Retrieve a list of attachments\n"],["attachments_details","Helpers","Helpers.html#method-i-attachments_details","()",""],["attachments_payload","Helpers","Helpers.html#method-i-attachments_payload","()",""],["attribute","Trello::Schema","Trello/Schema.html#method-i-attribute","(name, options={})",""],["attributes","Trello::BasicData","Trello/BasicData.html#method-i-attributes","()",""],["attributes=","Trello::Configuration","Trello/Configuration.html#method-i-attributes-3D","(attrs = {})",""],["auth_policy","Trello","Trello.html#method-c-auth_policy","()",""],["auth_policy","Trello::Client","Trello/Client.html#method-i-auth_policy","()",""],["authorize","Trello::Authorization::BasicAuthPolicy","Trello/Authorization/BasicAuthPolicy.html#method-c-authorize","(request)",""],["authorize","Trello::Authorization::BasicAuthPolicy","Trello/Authorization/BasicAuthPolicy.html#method-i-authorize","(request)",""],["authorize","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-c-authorize","(request)",""],["authorize","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-authorize","(request)",""],["authorize_url","Trello","Trello.html#method-c-authorize_url","(options = {})","<p>Url to token for making authorized requests to the Trello API\n<p>@param [String, #read] contents the contents …\n"],["avatar_url","Trello::Member","Trello/Member.html#method-i-avatar_url","(options = { size: :large })","<p>Retrieve a URL to the avatar.\n<p>Valid values for options are:\n\n<pre>:large (170x170)\n:small (30x30)</pre>\n"],["basic?","Trello::Configuration","Trello/Configuration.html#method-i-basic-3F","()",""],["board","Trello::Action","Trello/Action.html#method-i-board","()","<p>Returns the board this action occurred on.\n"],["board","Trello::Comment","Trello/Comment.html#method-i-board","()","<p>Returns the board this comment is located\n"],["board","Trello::Notification","Trello/Notification.html#method-i-board","()",""],["boards","Trello::Organization","Trello/Organization.html#method-i-boards","()","<p>Returns a list of boards under this organization.\n"],["boards_details","Helpers","Helpers.html#method-i-boards_details","()",""],["boards_payload","Helpers","Helpers.html#method-i-boards_payload","()",""],["build","Trello::AssociationBuilder::HasMany","Trello/AssociationBuilder/HasMany.html#method-c-build","(model_klass, name, options)",""],["build","Trello::AssociationBuilder::HasOne","Trello/AssociationBuilder/HasOne.html#method-c-build","(model_klass, name, options)",""],["build","Trello::Schema::AttributeBuilder","Trello/Schema/AttributeBuilder.html#method-c-build","(name, options = {})",""],["build","Trello::Schema::AttributeBuilder","Trello/Schema/AttributeBuilder.html#method-i-build","()",""],["build_attributes","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-build_attributes","(params, attributes)",""],["build_attributes","Trello::Schema::Attribute::BoardPref","Trello/Schema/Attribute/BoardPref.html#method-i-build_attributes","(params, attributes)",""],["build_attributes","Trello::Schema::Attribute::CustomFieldDisplay","Trello/Schema/Attribute/CustomFieldDisplay.html#method-i-build_attributes","(params, attributes)",""],["build_attributes","Trello::Schema::Attribute::Default","Trello/Schema/Attribute/Default.html#method-i-build_attributes","(params, attributes)",""],["build_payload_for_create","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-build_payload_for_create","(attributes, payload)",""],["build_payload_for_create","Trello::Schema::Attribute::BoardPref","Trello/Schema/Attribute/BoardPref.html#method-i-build_payload_for_create","(attributes, payload)",""],["build_payload_for_create","Trello::Schema::Attribute::CustomFieldDisplay","Trello/Schema/Attribute/CustomFieldDisplay.html#method-i-build_payload_for_create","(attributes, payload)",""],["build_payload_for_create","Trello::Schema::Attribute::Default","Trello/Schema/Attribute/Default.html#method-i-build_payload_for_create","(attributes, payload)",""],["build_payload_for_update","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-build_payload_for_update","(attributes, payload)",""],["build_payload_for_update","Trello::Schema::Attribute::BoardPref","Trello/Schema/Attribute/BoardPref.html#method-i-build_payload_for_update","(attributes, payload)",""],["build_payload_for_update","Trello::Schema::Attribute::CustomFieldDisplay","Trello/Schema/Attribute/CustomFieldDisplay.html#method-i-build_payload_for_update","(attributes, payload)",""],["build_payload_for_update","Trello::Schema::Attribute::Default","Trello/Schema/Attribute/Default.html#method-i-build_payload_for_update","(attributes, payload)",""],["build_pending_update_attributes","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-build_pending_update_attributes","(params, attributes)",""],["card","Trello::Action","Trello/Action.html#method-i-card","()","<p>Returns the card the action occurred on.\n"],["card","Trello::Comment","Trello/Comment.html#method-i-card","()","<p>Returns the card the comment is located\n"],["card","Trello::Notification","Trello/Notification.html#method-i-card","()",""],["card_payload","Helpers","Helpers.html#method-i-card_payload","()",""],["cards_details","Helpers","Helpers.html#method-i-cards_details","()",""],["cards_payload","Helpers","Helpers.html#method-i-cards_payload","()",""],["check_item_states","Trello::Card","Trello/Card.html#method-i-check_item_states","()",""],["checklists_details","Helpers","Helpers.html#method-i-checklists_details","()",""],["checklists_payload","Helpers","Helpers.html#method-i-checklists_payload","()",""],["client","Trello","Trello.html#method-c-client","()",""],["client","Trello::BasicData","Trello/BasicData.html#method-c-client","()",""],["client","Trello::BasicData","Trello/BasicData.html#method-i-client","()",""],["close","Trello::Card","Trello/Card.html#method-i-close","()","<p>Close the card.\n<p>This only marks your local copy card as closed. Use `close!` if you want to close the …\n"],["close","Trello::List","Trello/List.html#method-i-close","()",""],["close!","Trello::Card","Trello/Card.html#method-i-close-21","()",""],["close!","Trello::List","Trello/List.html#method-i-close-21","()",""],["closed?","Trello::Board","Trello/Board.html#method-i-closed-3F","()","<p>@return [Boolean]\n"],["closed?","Trello::Card","Trello/Card.html#method-i-closed-3F","()","<p>Check if the card is not active anymore.\n"],["closed?","Trello::List","Trello/List.html#method-i-closed-3F","()","<p>Check if the list is not active anymore.\n"],["collection_name","Trello::BasicData","Trello/BasicData.html#method-i-collection_name","()",""],["collection_name","Trello::CustomField","Trello/CustomField.html#method-i-collection_name","()",""],["collection_path","Trello::BasicData","Trello/BasicData.html#method-i-collection_path","()",""],["collection_path","Trello::CustomFieldItem","Trello/CustomFieldItem.html#method-i-collection_path","()",""],["collection_path","Trello::CustomFieldOption","Trello/CustomFieldOption.html#method-i-collection_path","()",""],["complete?","Trello::Item","Trello/Item.html#method-i-complete-3F","()",""],["configurable_attributes","Trello::Configuration","Trello/Configuration.html#method-c-configurable_attributes","()",""],["configuration","Trello","Trello.html#method-c-configuration","()",""],["configuration","Trello::Client","Trello/Client.html#method-i-configuration","()",""],["configure","Trello","Trello.html#method-c-configure","(&block)",""],["configure","Trello::Client","Trello/Client.html#method-i-configure","()",""],["consumer_key","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-consumer_key","()",""],["consumer_secret","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-consumer_secret","()",""],["copied_checklists_details","Helpers","Helpers.html#method-i-copied_checklists_details","()",""],["copied_checklists_payload","Helpers","Helpers.html#method-i-copied_checklists_payload","()",""],["copy","Trello::Checklist","Trello/Checklist.html#method-i-copy","()","<p>Copy a checklist (i.e., same attributes, items, etc.)\n"],["cover_image","Trello::Card","Trello/Card.html#method-i-cover_image","(params = {})","<p>Returns a reference to the cover image attachment\n"],["create","Trello::BasicData","Trello/BasicData.html#method-c-create","(options)",""],["create","Trello::Client","Trello/Client.html#method-i-create","(path, options)","<p>Creates resource with given options (attributes)\n<p>Examples:\n\n<pre>client.create(:member, options)\nclient.create(:board, ...</pre>\n"],["create_new_checklist","Trello::Card","Trello/Card.html#method-i-create_new_checklist","(name)","<p>create a new checklist and add it to this card\n"],["create_new_option","Trello::CustomField","Trello/CustomField.html#method-i-create_new_option","(value)","<p>If type == &#39;list&#39;, create a new option and add to this Custom Field\n"],["create_only?","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-create_only-3F","()",""],["credentials","Trello::Configuration","Trello/Configuration.html#method-i-credentials","()",""],["custom_field_item_details","Helpers","Helpers.html#method-i-custom_field_item_details","()",""],["custom_field_items_payload","Helpers","Helpers.html#method-i-custom_field_items_payload","()",""],["custom_field_option_details","Helpers","Helpers.html#method-i-custom_field_option_details","()",""],["custom_fields_details","Helpers","Helpers.html#method-i-custom_fields_details","()",""],["custom_fields_payload","Helpers","Helpers.html#method-i-custom_fields_payload","()",""],["default","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-default","()",""],["delete","Trello::Card","Trello/Card.html#method-i-delete","()","<p>Delete this card\n<p>@return [String] the JSON response from the Trello API\n"],["delete","Trello::Checklist","Trello/Checklist.html#method-i-delete","()","<p>Delete a checklist\n"],["delete","Trello::Client","Trello/Client.html#method-i-delete","(path)",""],["delete","Trello::Comment","Trello/Comment.html#method-i-delete","()","<p>Deletes the comment from the card\n"],["delete","Trello::CustomField","Trello/CustomField.html#method-i-delete","()","<p>Delete this custom field Also deletes all associated values across all cards\n"],["delete","Trello::CustomFieldOption","Trello/CustomFieldOption.html#method-i-delete","()",""],["delete","Trello::Label","Trello/Label.html#method-i-delete","()","<p>Delete this label\n"],["delete","Trello::Webhook","Trello/Webhook.html#method-i-delete","()","<p>Delete this webhook\n<p>@return [String] the JSON response from the Trello API\n"],["delete_checklist_item","Trello::Checklist","Trello/Checklist.html#method-i-delete_checklist_item","(item_id)","<p>Delete a checklist item\n"],["delete_option","Trello::CustomField","Trello/CustomField.html#method-i-delete_option","(option_id)","<p>Will also clear it from individual cards that have this option selected\n"],["deserialize","Trello::Schema::Serializer::Default","Trello/Schema/Serializer/Default.html#method-c-deserialize","(value, default)",""],["deserialize","Trello::Schema::Serializer::Labels","Trello/Schema/Serializer/Labels.html#method-c-deserialize","(labels, default)",""],["deserialize","Trello::Schema::Serializer::Time","Trello/Schema/Serializer/Time.html#method-c-deserialize","(time, default)",""],["deserialize","Trello::Schema::Serializer::Webhooks","Trello/Schema/Serializer/Webhooks.html#method-c-deserialize","(webhooks, default)",""],["element_name","Trello::BasicData","Trello/BasicData.html#method-i-element_name","()",""],["element_path","Trello::BasicData","Trello/BasicData.html#method-i-element_path","()",""],["element_path","Trello::CustomFieldItem","Trello/CustomFieldItem.html#method-i-element_path","()",""],["element_path","Trello::CustomFieldOption","Trello/CustomFieldOption.html#method-i-element_path","()",""],["eql?","Trello::BasicData","Trello/BasicData.html#method-i-eql-3F","(other)","<p>Alias hash equality to equality\n"],["example_class","Object","Object.html#method-i-example_class","()",""],["example_class","Trello","Trello.html#method-i-example_class","()",""],["execute","Trello::AssociationFetcher::HasMany::Fetch","Trello/AssociationFetcher/HasMany/Fetch.html#method-c-execute","(params)",""],["execute","Trello::AssociationFetcher::HasMany::Fetch","Trello/AssociationFetcher/HasMany/Fetch.html#method-i-execute","()",""],["execute","Trello::AssociationFetcher::HasOne::Fetch","Trello/AssociationFetcher/HasOne/Fetch.html#method-c-execute","(params)",""],["execute","Trello::AssociationFetcher::HasOne::Fetch","Trello/AssociationFetcher/HasOne/Fetch.html#method-i-execute","()",""],["execute","Trello::TInternet","Trello/TInternet.html#method-c-execute","(request)",""],["fetch","Trello::AssociationFetcher::HasMany","Trello/AssociationFetcher/HasMany.html#method-i-fetch","(filter_params)",""],["fetch","Trello::AssociationFetcher::HasOne","Trello/AssociationFetcher/HasOne.html#method-i-fetch","()",""],["fetch_path","Trello::AssociationFetcher::HasMany::Params","Trello/AssociationFetcher/HasMany/Params.html#method-i-fetch_path","()",""],["filter_params","Trello::AssociationFetcher::HasMany::Params","Trello/AssociationFetcher/HasMany/Params.html#method-i-filter_params","()",""],["find","Trello::Action","Trello/Action.html#method-c-find","(id, params = {})","<p>Locate a specific action and return a new Action object.\n"],["find","Trello::BasicData","Trello/BasicData.html#method-c-find","(id, params = {})",""],["find","Trello::Client","Trello/Client.html#method-i-find","(path, id, params = {})","<p>Finds given resource by id\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">find</span>(<span class=\"ruby-value\">:board</span>, <span class=\"ruby-string\">&quot;board1234&quot;</span>)\n<span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">find</span>(<span class=\"ruby-value\">:member</span>, <span class=\"ruby-string\">&quot;user1234&quot;</span>)\n</pre>\n"],["find","Trello::Comment","Trello/Comment.html#method-c-find","(action_id)",""],["find","Trello::CustomField","Trello/CustomField.html#method-c-find","(id, params = {})","<p>Find a custom field by its id.\n"],["find","Trello::CustomFieldOption","Trello/CustomFieldOption.html#method-c-find","(id, params = {})",""],["find","Trello::List","Trello/List.html#method-c-find","(id, params = {})","<p>Finds a specific list, given an id.\n<p>@param [id] id the list&#39;s ID on Trello (24-character hex string). …\n"],["find","Trello::Member","Trello/Member.html#method-c-find","(id_or_username, params = {})","<p>Finds a user\n<p>The argument may be specified as either an <em>id</em> or a <em>username</em>.\n"],["find","Trello::Organization","Trello/Organization.html#method-c-find","(id, params = {})","<p>Find an organization by its id.\n"],["find","Trello::Token","Trello/Token.html#method-c-find","(token, params = {webhooks: true})","<p>Finds a token\n"],["find_card","Trello::Board","Trello/Board.html#method-i-find_card","(card_id)","<p>Find a card on this Board with the given ID. @return [Trello::Card]\n"],["find_many","Trello::Client","Trello/Client.html#method-i-find_many","(trello_class, path, params = {})","<p>Finds given resource by path with params\n"],["for_action?","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-for_action-3F","(action)",""],["from_json","Trello::JsonUtils::ClassMethods","Trello/JsonUtils/ClassMethods.html#method-i-from_json","(json)",""],["from_response","Trello::JsonUtils::ClassMethods","Trello/JsonUtils/ClassMethods.html#method-i-from_response","(data, encoding = 'UTF-8')","<p>Public - Decodes some JSON text in the receiver, and marshals it into a class specified in <em>obj</em>.\n<p>For instance: …\n"],["from_response","Trello::JsonUtils::InstanceMethods","Trello/JsonUtils/InstanceMethods.html#method-i-from_response","(*args)",""],["get","IntegrationTest","IntegrationTest.html#method-i-get","(uri)",""],["get","Trello::Client","Trello/Client.html#method-i-get","(path, params = {})",""],["has_lists?","Trello::Board","Trello/Board.html#method-i-has_lists-3F","()","<p>@return [Boolean]\n"],["hash","Trello::BasicData","Trello/BasicData.html#method-i-hash","()","<p>Delegate hash key computation to class and id pair\n"],["included","IntegrationTest","IntegrationTest.html#method-c-included","(klass)",""],["included","Trello::JsonUtils","Trello/JsonUtils.html#method-c-included","(base)",""],["infer_class_on_name","Trello::AssociationInferTool","Trello/AssociationInferTool.html#method-c-infer_class_on_name","(name)",""],["infer_restful_resource_on_class","Trello::AssociationInferTool","Trello/AssociationInferTool.html#method-c-infer_restful_resource_on_class","(klass)",""],["item","Trello::CheckItemState","Trello/CheckItemState.html#method-i-item","()","<p>Return the item this state belongs to.\n"],["items","Trello::Checklist","Trello/Checklist.html#method-i-items","()","<p>Return a list of items on the checklist.\n"],["json_into","String","String.html#method-i-json_into","(obj, encoding = 'UTF-8')",""],["jsoned_into","Array","Array.html#method-i-jsoned_into","(obj)",""],["jsoned_into","Hash","Hash.html#method-i-jsoned_into","(obj)",""],["label_details","Helpers","Helpers.html#method-i-label_details","()",""],["label_name_details","Helpers","Helpers.html#method-i-label_name_details","()",""],["label_name_payload","Helpers","Helpers.html#method-i-label_name_payload","()",""],["label_names","Trello::Board","Trello/Board.html#method-i-label_names","()",""],["label_options","Helpers","Helpers.html#method-i-label_options","()",""],["label_payload","Helpers","Helpers.html#method-i-label_payload","()",""],["labels","Trello::Board","Trello/Board.html#method-i-labels","(params = {})",""],["list","Trello::Action","Trello/Action.html#method-i-list","()","<p>Returns the list the action occurred on.\n"],["list","Trello::Comment","Trello/Comment.html#method-i-list","()","<p>Returns the list the comment is located\n"],["list","Trello::Notification","Trello/Notification.html#method-i-list","()",""],["lists_details","Helpers","Helpers.html#method-i-lists_details","()",""],["lists_payload","Helpers","Helpers.html#method-i-lists_payload","()",""],["logger","Trello","Trello.html#method-c-logger","()",""],["logger=","Trello","Trello.html#method-c-logger-3D","(logger)",""],["many","Trello::BasicData","Trello/BasicData.html#method-c-many","(name, opts = {})",""],["member","Trello::Notification","Trello/Notification.html#method-i-member","()",""],["member_creator","Trello::Action","Trello/Action.html#method-i-member_creator","()","<p>Returns the list the action occurred on.\n"],["members","Trello::Card","Trello/Card.html#method-i-members","()","<p>Returns a list of members who are assigned to this card.\n<p>@return [Array&lt;Trello::Member&gt;]\n"],["members","Trello::Organization","Trello/Organization.html#method-i-members","(params = {})","<p>Returns an array of members associated with the organization.\n"],["method_missing","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-method_missing","(method, *args, &block)",""],["mock_client_and_association","Object","Object.html#method-i-mock_client_and_association","(klass: Trello::FakeOrganization, id: 1, path: nil, id_field: :id)",""],["mock_client_and_association","Trello","Trello.html#method-i-mock_client_and_association","(klass:, resource:, id:, path:, params:)",""],["move_all_cards","Trello::List","Trello/List.html#method-i-move_all_cards","(other_list)",""],["move_to_board","Trello::Card","Trello/Card.html#method-i-move_to_board","(new_board, new_list = nil)","<p>Move this card to the given board (and optional list on this board)\n"],["move_to_list","Trello::Card","Trello/Card.html#method-i-move_to_list","(list)","<p>Move this card to the given list\n"],["move_to_list_on_any_board","Trello::Card","Trello/Card.html#method-i-move_to_list_on_any_board","(list_id)","<p>Moves this card to the given list no matter which board it is on\n"],["new","Object","Object.html#method-c-new","(options = {})",""],["new","Trello","Trello.html#method-c-new","(options = {})",""],["new","Trello::Association","Trello/Association.html#method-c-new","(owner, target)",""],["new","Trello::AssociationFetcher::HasMany","Trello/AssociationFetcher/HasMany.html#method-c-new","(model, name, options)",""],["new","Trello::AssociationFetcher::HasMany::Fetch","Trello/AssociationFetcher/HasMany/Fetch.html#method-c-new","(params)",""],["new","Trello::AssociationFetcher::HasMany::Params","Trello/AssociationFetcher/HasMany/Params.html#method-c-new","(association_owner:, association_name:, association_options:, filter:)",""],["new","Trello::AssociationFetcher::HasOne","Trello/AssociationFetcher/HasOne.html#method-c-new","(model, name, options)",""],["new","Trello::AssociationFetcher::HasOne::Fetch","Trello/AssociationFetcher/HasOne/Fetch.html#method-c-new","(params)",""],["new","Trello::AssociationFetcher::HasOne::Params","Trello/AssociationFetcher/HasOne/Params.html#method-c-new","(association_owner:, association_name:, association_options:)",""],["new","Trello::AssociationProxy","Trello/AssociationProxy.html#method-c-new","(association)",""],["new","Trello::Authorization::BasicAuthPolicy","Trello/Authorization/BasicAuthPolicy.html#method-c-new","(attrs = {})",""],["new","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-c-new","(attrs = {})",""],["new","Trello::BasicData","Trello/BasicData.html#method-c-new","(fields = {})",""],["new","Trello::Client","Trello/Client.html#method-c-new","(attrs = {})",""],["new","Trello::Configuration","Trello/Configuration.html#method-c-new","(attrs = {})",""],["new","Trello::Error","Trello/Error.html#method-c-new","(message, status_code=nil)",""],["new","Trello::FakeBoard","Trello/FakeBoard.html#method-c-new","()",""],["new","Trello::MultiAssociation","Trello/MultiAssociation.html#method-c-new","(owner, target = [])",""],["new","Trello::Schema","Trello/Schema.html#method-c-new","()",""],["new","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-c-new","(name:, options:, serializer:)",""],["new","Trello::Schema::AttributeBuilder","Trello/Schema/AttributeBuilder.html#method-c-new","(name, options)",""],["new","Trello::Schema::AttributeRegistration","Trello/Schema/AttributeRegistration.html#method-c-new","(klass, attribute)",""],["next","Trello::Authorization::Nonce","Trello/Authorization/Nonce.html#method-c-next","()",""],["notification_details","Helpers","Helpers.html#method-i-notification_details","()",""],["notification_payload","Helpers","Helpers.html#method-i-notification_payload","()",""],["oauth?","Trello::Configuration","Trello/Configuration.html#method-i-oauth-3F","()",""],["oauth_token","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-oauth_token","()",""],["oauth_token_secret","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-oauth_token_secret","()",""],["one","Trello::BasicData","Trello/BasicData.html#method-c-one","(name, opts = {})",""],["open_authorization_url","Trello","Trello.html#method-c-open_authorization_url","(options = {})","<p>Visit the Trello authorized token page\n<p>@see developers.trello.com/authorize\n"],["open_public_key_url","Trello","Trello.html#method-c-open_public_key_url","()","<p>Visit the Trello API public key page\n<p>@see trello.com/app-key\n"],["open_url","Trello","Trello.html#method-c-open_url","(url)","<p>@private\n"],["option_value","Trello::CustomFieldItem","Trello/CustomFieldItem.html#method-i-option_value","()","<p>Need to make another call to get the actual value if the custom field type == &#39;list&#39;\n"],["organization","Trello::Notification","Trello/Notification.html#method-i-organization","()",""],["organization_details","Helpers","Helpers.html#method-i-organization_details","()",""],["organization_payload","Helpers","Helpers.html#method-i-organization_payload","()",""],["orgs_details","Helpers","Helpers.html#method-i-orgs_details","()",""],["orgs_payload","Helpers","Helpers.html#method-i-orgs_payload","()",""],["parse","Trello::BasicData","Trello/BasicData.html#method-c-parse","(response)",""],["parse_json","Trello::JsonUtils::ClassMethods","Trello/JsonUtils/ClassMethods.html#method-i-parse_json","(string, encoding = 'UTF-8')",""],["parse_json","Trello::JsonUtils::InstanceMethods","Trello/JsonUtils/InstanceMethods.html#method-i-parse_json","(*args)",""],["parse_many","Trello::BasicData","Trello/BasicData.html#method-c-parse_many","(response)",""],["path_name","Trello::BasicData","Trello/BasicData.html#method-c-path_name","()",""],["plugin_data_details","Helpers","Helpers.html#method-i-plugin_data_details","()",""],["plugin_data_payload","Helpers","Helpers.html#method-i-plugin_data_payload","()",""],["post","Trello::Client","Trello/Client.html#method-i-post","(path, body = {})",""],["primary_key?","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-primary_key-3F","()",""],["proxy_assocation","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-proxy_assocation","()",""],["public_key_url","Trello","Trello.html#method-c-public_key_url","()","<p>Url to Trello API public key page\n"],["put","Trello::Client","Trello/Client.html#method-i-put","(path, body = {})",""],["readonly?","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-readonly-3F","()",""],["refresh!","Trello::BasicData","Trello/BasicData.html#method-i-refresh-21","()","<p>Refresh the contents of our object.\n"],["register","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-register","(model_klass)",""],["register","Trello::Schema::AttributeRegistration","Trello/Schema/AttributeRegistration.html#method-c-register","(klass, attribute)",""],["register","Trello::Schema::AttributeRegistration","Trello/Schema/AttributeRegistration.html#method-i-register","()",""],["register_attrs","Trello::BasicData","Trello/BasicData.html#method-c-register_attrs","()",""],["remote_key","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-remote_key","()",""],["remove","Trello::CustomFieldItem","Trello/CustomFieldItem.html#method-i-remove","()","<p>You can&#39;t “delete” a custom field item, you can only clear the value\n"],["remove_attachment","Trello::Card","Trello/Card.html#method-i-remove_attachment","(attachment)","<p>Remove an attachment from this card\n"],["remove_label","Trello::Card","Trello/Card.html#method-i-remove_label","(label)","<p>Remove a label\n"],["remove_member","Trello::Board","Trello/Board.html#method-i-remove_member","(member)","<p>Remove a member of this Board.\n"],["remove_member","Trello::Card","Trello/Card.html#method-i-remove_member","(member)","<p>Remove a member from this card\n"],["remove_upvote","Trello::Card","Trello/Card.html#method-i-remove_upvote","()","<p>Recind upvote. Noop if authenticated user hasn&#39;t previously voted\n"],["reset!","Trello","Trello.html#method-c-reset-21","()",""],["save","Trello::BasicData","Trello/BasicData.html#method-c-save","(options)",""],["save","Trello::BasicData","Trello/BasicData.html#method-i-save","()",""],["save","Trello::CustomFieldItem","Trello/CustomFieldItem.html#method-i-save","()",""],["schema","Trello::BasicData","Trello/BasicData.html#method-c-schema","(&block)",""],["schema","Trello::BasicData","Trello/BasicData.html#method-i-schema","()",""],["search","Trello::Action","Trello/Action.html#method-c-search","(query, opts = {})",""],["serialize","Trello::Schema::Serializer::Default","Trello/Schema/Serializer/Default.html#method-c-serialize","(value)",""],["serialize","Trello::Schema::Serializer::Labels","Trello/Schema/Serializer/Labels.html#method-c-serialize","(labels)",""],["serialize","Trello::Schema::Serializer::Time","Trello/Schema/Serializer/Time.html#method-c-serialize","(time)",""],["serialize","Trello::Schema::Serializer::Webhooks","Trello/Schema/Serializer/Webhooks.html#method-c-serialize","(webhooks)",""],["set","IntegrationTest::Container","IntegrationTest/Container.html#method-c-set","(parent, name, value)",""],["setup_trello","IntegrationHelpers","IntegrationHelpers.html#method-i-setup_trello","()",""],["starred?","Trello::Board","Trello/Board.html#method-i-starred-3F","()","<p>@return [Boolean]\n"],["timestamp","Trello::Authorization::Clock","Trello/Authorization/Clock.html#method-c-timestamp","()",""],["to_a","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-to_a","()",""],["to_ary","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-to_ary","()",""],["token_details","Helpers","Helpers.html#method-i-token_details","()",""],["token_payload","Helpers","Helpers.html#method-i-token_payload","()",""],["type","Trello::CustomFieldItem","Trello/CustomFieldItem.html#method-i-type","()","<p>Type is saved at the CustomField level Can equally be derived from :value, with a little parsing work: …\n"],["update!","Trello::BasicData","Trello/BasicData.html#method-i-update-21","()",""],["update_fields","Trello::BasicData","Trello/BasicData.html#method-i-update_fields","(fields)",""],["update_fields","Trello::FakeBoard","Trello/FakeBoard.html#method-i-update_fields","(fields)",""],["update_item_state","Trello::Checklist","Trello/Checklist.html#method-i-update_item_state","(item_id, state)","<p>Update a checklist item&#39;s state, e.g.: “complete” or “incomplete”\n"],["update_only?","Trello::Schema::Attribute::Base","Trello/Schema/Attribute/Base.html#method-i-update_only-3F","()",""],["upvote","Trello::Card","Trello/Card.html#method-i-upvote","()","<p>Current authenticated user upvotes a card\n"],["user_details","Helpers","Helpers.html#method-i-user_details","()",""],["user_payload","Helpers","Helpers.html#method-i-user_payload","()",""],["valid?","Trello::Card","Trello/Card.html#method-i-valid-3F","()","<p>Is the record valid?\n"],["voters","Trello::Card","Trello/Card.html#method-i-voters","()","<p>Returns a list of members who have upvoted this card NOTE: this fetches a list each time it&#39;s called …\n"],["webhook_payload","Helpers","Helpers.html#method-i-webhook_payload","()",""],["webhooks_details","Helpers","Helpers.html#method-i-webhooks_details","()",""],["webhooks_payload","Helpers","Helpers.html#method-i-webhooks_payload","()",""],["CHANGELOG","","CHANGELOG_md.html","","<p>Changelog\n<p>Next Release\n<p>Fix “Trello::Board#update! fail to update description”\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>Contributing\n<p>To get started, please sign the CLA\n<p>Fork the repository\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>if active_model_version = ENV\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">gem</span> <span class=\"ruby-string\">&#39;activemodel&#39;</span>, <span class=\"ruby-identifier\">active_model_version</span>\n</pre>\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  ruby-trello (2.3.1)\n    activemodel (&gt;= 3.2.0)\n    addressable (~&gt; 2.3)\n    json ...</pre>\n"],["Gemfile.lock.jruby","","Gemfile_lock_jruby.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  ruby-trello (2.3.1)\n    activemodel (&gt;= 3.2.0)\n    addressable (~&gt; 2.3)\n    json ...</pre>\n"],["Gemfile.lock.ruby_2_5","","Gemfile_lock_ruby_2_5.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  ruby-trello (2.3.1)\n    activemodel (&gt;= 3.2.0)\n    addressable (~&gt; 2.3)\n    json ...</pre>\n"],["Gemfile.lock.ruby_2_6","","Gemfile_lock_ruby_2_6.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  ruby-trello (2.3.1)\n    activemodel (&gt;= 3.2.0)\n    addressable (~&gt; 2.3)\n    json ...</pre>\n"],["Gemfile.lock.ruby_2_7","","Gemfile_lock_ruby_2_7.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  ruby-trello (2.3.1)\n    activemodel (&gt;= 3.2.0)\n    addressable (~&gt; 2.3)\n    json ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2012, Jeremy Tregunna\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["Makefile","","Makefile.html","","<p>RUN = docker-compose run –rm\n<p>init:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">touch</span> <span class=\"ruby-constant\">Gemfile</span>.<span class=\"ruby-identifier\">lock</span>.<span class=\"ruby-identifier\">ruby_2_5</span>\n<span class=\"ruby-identifier\">touch</span> <span class=\"ruby-constant\">Gemfile</span>.<span class=\"ruby-identifier\">lock</span>.<span class=\"ruby-identifier\">ruby_2_6</span>\n<span class=\"ruby-identifier\">touch</span> <span class=\"ruby-constant\">Gemfile</span>.<span class=\"ruby-identifier\">lock</span>.<span class=\"ruby-identifier\">ruby_2_7</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["README","","README_md.html","","<p>Ruby Trello API\n<p><img src=\"https://secure.travis-ci.org/jeremytregunna/ruby-trello.svg\">\n<img src=\"https://hakiri.io/github/jeremytregunna/ruby-trello/master.svg\"> ...\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rspec/core/rake_task&#39;\n<p>RSpec::Core::RakeTask.new\n<p>task :default =&gt; [:spec]\n"],["application.css","","coverage/assets/0_10_2/application_css.html","","\n<pre>  -----------------------------------------------------------------------\n\nBlueprint CSS Framework 0.9 ...</pre>\n"],["application.js","","coverage/assets/0_10_2/application_js.html","","\n<pre>!\n jQuery JavaScript Library v1.6.2\n http://jquery.com/\n\n Copyright 2011, John Resig\n Dual licensed under ...</pre>\n"],["application.css","","coverage/assets/0_12_2/application_css.html","","<p>html,body,div,span,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,code,del,dfn,em,img,q,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,dialog,figure,footer,header,hgroup,nav,section{margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline}article,aside,dialog,figure,footer,header,hgroup,nav,section{display:block}body{line-height:1.5}table{border-collapse:separate;border-spacing:0}caption,th,td{text-align:left;font-weight:normal}table,td,th{vertical-align:middle}blockquote:before,blockquote:after,q:before,q:after{content:“”}blockquote,q{quotes:“” …\n"],["application.js","","coverage/assets/0_12_2/application_js.html","","<p>!function(e,t)“use strict”;“object”==typeof module&&“object”==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw …\n"],["index.html","","coverage/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html xmlns=&#39;www.w3.org/1999/xhtml&#39;&gt;\n\n<pre>&lt;head&gt;\n  &lt;title&gt;Code coverage ...</pre>\n"],["ruby-trello.gemspec","","ruby-trello_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">name</span>              = <span class=\"ruby-string\">%q{ruby-trello}</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">version</span>           = <span class=\"ruby-string\">&quot;2.3.1&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">platform</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}